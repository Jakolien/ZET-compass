diff --git a/TCOModel.py b/TCOModel.py
index 071d5fe..a7bbb1f 100644
--- a/TCOModel.py
+++ b/TCOModel.py
@@ -16,7 +16,7 @@ class TCOModel:
     PANTEIA_interface: PANTEIAInterface = None
     fleet: dict = None
     scenarios: dict = None
-    output: str = None
+    output: tuple = None
     : Logger = None
 
     # Model constants
@@ -32,7 +32,7 @@ class TCOModel:
                  fleet: dict,
                  scenarios: dict,
                  valid_scenario_names: tuple,
-                 output: str,
+                 output: tuple,
                  logger: Logger,
                  extra_years_after_lifespan: int = 5,
                  increase_factor_after_lifespan: float = 1.5,
@@ -50,7 +50,7 @@ class TCOModel:
         :param valid_scenario_names: All the valid scenario names.
         :type valid_scenario_names: tuple
         :param output: The expected output.
-        :type output: str
+        :type output: tuple
         :param extra_years_after_lifespan: The maximum extra years after the lifespan.
         :type extra_years_after_lifespan: int
         :param increase_factor_after_lifespan: The factor to increase costs after the original lifespan.
@@ -170,7 +170,13 @@ class TCOModel:
         graphs["TCO_average_emissions"] = graph_helper.plot_TCO_fleet_average_emissions(fleet_TCO["averages"])
         graphs["TCO_costs_breakdown"] = graph_helper.plot_TCO_costs_breakdown(fleet_TCO["averages"])
 
-        return self.format_data(graphs)
+        # Add relevant data to data
+        data = {
+            "fleet_TCO": fleet_TCO,
+            "graphs": graphs
+        }
+
+        return self.format_data(data)
 
     def compare_scenarios(self, strategy_name: str, scenario_names: tuple):
 
@@ -207,7 +213,7 @@ class TCOModel:
         fleet_TCO = {number_plate: self.calculate_TCO(vehicle, scenarios, strategy)
                      for number_plate, vehicle in self.fleet.items()}
 
-        # Create graphs
+        # Create graphs dict
         graphs = {}
 
         # Initialise Graph Helper
@@ -245,7 +251,13 @@ class TCOModel:
         graphs["TCO_average_emissions"] = graph_helper.plot_TCO_fleet_average_emissions(fleet_TCO["averages"])
         graphs["TCO_costs_breakdown"] = graph_helper.plot_TCO_costs_breakdown(fleet_TCO["averages"])
 
-        return self.format_data(graphs)
+        # Add relevant data to data
+        data = {
+            "fleet_TCO": fleet_TCO,
+            "graphs": graphs
+        }
+
+        return self.format_data(data)
 
     def format_data(self, data: dict):
 
@@ -258,24 +270,35 @@ class TCOModel:
         :rtype: dict
         """
 
-        if self.output == "graphs":
-            return {
-                "graphs": data
-            }
-
-        elif self.output == "graphs_and_input":
-            fleet = {number_plate: vehicle.to_dict() for number_plate, vehicle in self.fleet.items()}
-            scenarios = {scenario_type: {vehicle_type: year_data.to_dict()
-                                         for vehicle_type, year_data in scenario_data.items()}
-                         for scenario_type, scenario_data in self.scenarios.items()}
-
-            return {
-                "graphs": data,
-                "original_fleet": fleet,
-                "scenarios": scenarios
-            }
-
-        raise OutputIsNotSupported
+        formatted_data = {}
+
+        # check graphs
+        if "graphs" in self.output:
+            if "graphs" in data.keys():
+                formatted_data["graphs"] = data["graphs"]
+            else:
+                formatted_data["graphs"] = "Graphs couldn't be found."
+
+        # Check input
+        if "input" in self.output:
+
+            formatted_data["original_fleet"] = {number_plate: vehicle.to_dict()
+                                                for number_plate, vehicle in self.fleet.items()}
+            formatted_data["scenarios"] = {scenario_type: {vehicle_type: year_data.to_dict()
+                                                           for vehicle_type, year_data in scenario_data.items()}
+                                           for scenario_type, scenario_data in self.scenarios.items()}
+
+        # Check results
+        if "results" in self.output:
+            if "fleet_TCO" in data.keys():
+                formatted_data["results"] = data["fleet_TCO"]
+            else:
+                formatted_data["results"] = "Results couldn't be found."
+
+        if len(formatted_data.keys()) > 0:
+            return formatted_data
+        else:
+            raise OutputIsNotSupported
 
     def calculate_TCO(self, vehicle: Vehicle, scenarios: dict, strategies: dict):
 
diff --git a/app.py b/app.py
index 22f93e9..74aa154 100644
--- a/app.py
+++ b/app.py
@@ -80,7 +80,8 @@ def process_external_excel():
                         output,
                         comparing,
                         selected_scenarios,
-                        selected_strategies)
+                        selected_strategies,
+                        logger)
 
     # Return output
     output_format = request.args.get("output_format")
@@ -108,7 +109,8 @@ def process_json_data():
                         output,
                         comparing,
                         selected_scenarios,
-                        selected_strategies)
+                        selected_strategies,
+                        logger)
 
     # Return output
     output_format = request.args.get("output_format")
diff --git a/data_objects/Strategy1.py b/data_objects/Strategy1.py
index cc6bab1..79dceae 100644
--- a/data_objects/Strategy1.py
+++ b/data_objects/Strategy1.py
@@ -70,9 +70,9 @@ class Strategy1(AbstractStrategy):
             # Check if optimal mix is valid
             is_optimal_mix_valid = PANTEIA_interface.is_optimal_mix_valid()
 
-            logger.log(f"{year}: {current_vehicle_age}: {current_lifespan} : {is_optimal_mix_valid}")
-            logger.warning("Cell map:")
-            #for address, cell in self. excel_model.cell_map.items():
+            # logger.log(f"{year}: {current_vehicle_age}: {current_lifespan} : {is_optimal_mix_valid}")
+            # logger.warning("Cell map:")
+            # for address, cell in self. excel_model.cell_map.items():
             #    logger.warning(f"{address}: {cell}")
 
             # Determine if vehicle needs to be changed
diff --git a/request_functions.py b/request_functions.py
index 15b7659..687f4e1 100644
--- a/request_functions.py
+++ b/request_functions.py
@@ -59,7 +59,7 @@ def get_scenarios_from_parameters(request: Request):
     :type request: Request
 
     :return: The scenarios parameter.
-    :rtype: str
+    :rtype: tuple
     """
 
     scenarios = request.args.get("scenarios")
@@ -83,7 +83,7 @@ def get_strategies_from_parameters(request: Request):
     :type request: Request
 
     :return: The strategies parameter.
-    :rtype: str
+    :rtype: tuple
     """
 
     strategies = request.args.get("strategies")
@@ -101,20 +101,28 @@ def get_strategies_from_parameters(request: Request):
 
 def get_output_from_parameters(request: Request):
 
-    """Get the output parameter from the request URL parameters.
+    """Get the outputs from the request URL parameters.
 
     :param request: The request.
     :type request: Request
 
-    :return: The output parameter.
-    :rtype: str
+    :return: A tuple with the valid outputs. Defaults to "graphs" and "results", if there are none.
+    :rtype: tuple
     """
 
-    output = request.args.get("output")
-    if output not in ["graphs", "graphs_and_input"]:
-        output = "graphs"
+    # Get output parameter and check for valid outputs
+    output_parameter = request.args.get("output", "")
+    outputs = output_parameter.split(",")
+    actual_outputs = [output for output in outputs if output in ["graphs", "input", "results"]]
 
-    return output
+    # If there are no valid outputs, default to graphs and table results
+    if len(actual_outputs) < 1:
+        actual_outputs = ["graphs", "results"]
+
+    # Turn list into tuple
+    actual_outputs = tuple(actual_outputs)
+
+    return actual_outputs
 
 
 def get_fleet_data_from_parameters(request: Request, company: str):
@@ -127,7 +135,7 @@ def get_fleet_data_from_parameters(request: Request, company: str):
     :type company: str
 
     :return: The scenario Excel data in dictionary format. Consists of: path, interface, and fleet.
-    :rtype: str
+    :rtype: dict
     """
 
     path_to_fleet_data = request.args.get("fleet_data")
@@ -276,7 +284,7 @@ def get_encoded_excel_from_body(request: Request, company: str):
 def process_data(fleet: dict,
                  scenarios: dict,
                  valid_scenario_names: tuple,
-                 output: str,
+                 output: tuple,
                  comparing: str,
                  selected_scenarios: tuple,
                  selected_strategies: tuple,
@@ -291,13 +299,15 @@ def process_data(fleet: dict,
     :param valid_scenario_names: The valid scenario names.
     :type valid_scenario_names: tuple
     :param output: The specified output.
-    :type output: str
+    :type output: tuple
     :param comparing: The specified comparison mode.
     :type comparing: str
     :param selected_scenarios: The selected scenarios.
     :type selected_scenarios: tuple
     :param selected_strategies: The selected strategies.
-    :type selected_strategies: tuple
+    :type selected_strategies: tuple,
+    :param logger: The logger to allow for logging.
+    :type logger: Logger
 
     :raise NoScenarioSpecified: Raised if the comparison mode is "strategies", but no scenario is specified.
     :raise NoStrategySpecified: Raised if the comparison mode is "scenarios", but no strategy is specified.
@@ -359,6 +369,16 @@ def format_output(output_format: str, data: dict):
     # Return results
     if output_format == "html":
 
+        result_properties = None
+        if data.get("results", None):
+            result_properties = \
+                list(
+                    list(
+                        list(data["results"]["averages"].values()
+                        )[0].values()
+                    )[0].values()
+                )[0].keys()
+
         fleet_properties = None
         if data.get("original_fleet", None):
             fleet_properties = list(data["original_fleet"].values())[0].keys()
@@ -369,12 +389,13 @@ def format_output(output_format: str, data: dict):
                 list(
                     list(
                         list(data["scenarios"].values()
-                             )[0].values()
+                         )[0].values()
                     )[0]["years"].values()
                 )[0].keys()
 
         return render_template("results.html",
                                data=data,
+                               result_properties=result_properties,
                                fleet_properties=fleet_properties,
                                scenario_year_properties=scenario_year_properties)
 
diff --git a/templates/documentation.html b/templates/documentation.html
index d6698cf..18fc575 100644
--- a/templates/documentation.html
+++ b/templates/documentation.html
@@ -60,13 +60,14 @@
             Als comparing gelijk is aan "strategies", dan wordt de eerste scenario in de lijst geselecteerd.
         </li>
         <li>
-            output (string) [optioneel]: Dit is de optie die selecteert wat het model als resultaat verstuurd.
+            output (string) [optioneel]: Dit is een komma geplitste lijst van resultaten.
             Hiervoor zijn de volgende opties:
             <ul>
-                <li>graphs: Het model zal verschillende grafieken met TCO waardes versturen.</li>
-                <li>graphs_and_input: Het model zal bovenstaande grafieken en de Excel input data versturen.</li>
+                <li>graphs: Het resultaat zal verschillende grafieken met TCO waardes bevatten.</li>
+                <li>results: Het resultaat zal de TCO waardes bevatten.</li>
+                <li>input: Het resultaat zal de input data van het model versturen.</li>
             </ul>
-            Is standaard: "graphs".
+            Is standaard: "graphs,results".
         </li>
         <li>
             output_format (string) [optioneel]: Dit is de optie die selecteert in
@@ -76,7 +77,7 @@
                 <li>html: Het resultaat zal als een HTML pagina getoond worden.</li>
                 <li>json: Het resultaat zal als een JSON object verstuurd worden.</li>
             </ul>
-            Is standaard: "graphs".
+            Is standaard: "html".
         </li>
     </ul>
 
@@ -110,13 +111,14 @@
             Als comparing gelijk is aan "strategies", dan wordt de eerste scenario in de lijst geselecteerd.
         </li>
         <li>
-            output (string) [optioneel]: Dit is de optie die selecteert wat het model als resultaat verstuurd.
+            output (string) [optioneel]: Dit is een komma geplitste lijst van resultaten.
             Hiervoor zijn de volgende opties:
             <ul>
-                <li>graphs: Het model zal verschillende grafieken met TCO waardes versturen.</li>
-                <li>graphs_and_input: Het model zal bovenstaande grafieken en de Excel input data versturen.</li>
+                <li>graphs: Het resultaat zal verschillende grafieken met TCO waardes bevatten.</li>
+                <li>results: Het resultaat zal de TCO waardes bevatten.</li>
+                <li>input: Het resultaat zal de input data van het model versturen.</li>
             </ul>
-            Is standaard: "graphs".
+            Is standaard: "graphs,results".
         </li>
         <li>
             output_format (string) [optioneel]: Dit is de optie die selecteert in
@@ -126,7 +128,7 @@
                 <li>html: Het resultaat zal als een HTML pagina getoond worden.</li>
                 <li>json: Het resultaat zal als een JSON object verstuurd worden.</li>
             </ul>
-            Is standaard: "graphs".
+            Is standaard: "html".
         </li>
     </ul>
     <h4>Body</h4>
@@ -162,13 +164,14 @@
             Als comparing gelijk is aan "strategies", dan wordt de eerste scenario in de lijst geselecteerd.
         </li>
         <li>
-            output (string) [optioneel]: Dit is de optie die selecteert wat het model als resultaat verstuurd.
+            output (string) [optioneel]: Dit is een komma geplitste lijst van resultaten.
             Hiervoor zijn de volgende opties:
             <ul>
-                <li>graphs: Het model zal verschillende grafieken met TCO waardes versturen.</li>
-                <li>graphs_and_input: Het model zal bovenstaande grafieken en de Excel input data versturen.</li>
+                <li>graphs: Het resultaat zal verschillende grafieken met TCO waardes bevatten.</li>
+                <li>results: Het resultaat zal de TCO waardes bevatten.</li>
+                <li>input: Het resultaat zal de input data van het model versturen.</li>
             </ul>
-            Is standaard: "graphs".
+            Is standaard: "graphs,results".
         </li>
         <li>
             output_format (string) [optioneel]: Dit is de optie die selecteert in
@@ -178,7 +181,7 @@
                 <li>html: Het resultaat zal als een HTML pagina getoond worden.</li>
                 <li>json: Het resultaat zal als een JSON object verstuurd worden.</li>
             </ul>
-            Is standaard: "graphs".
+            Is standaard: "html".
         </li>
     </ul>
     <h4>Body</h4>
diff --git a/templates/results.html b/templates/results.html
index 292af43..d423099 100644
--- a/templates/results.html
+++ b/templates/results.html
@@ -4,6 +4,8 @@
 
 {% block content %}
     <h1 class="text-center">Resultaten</h1>
+
+    {# Graphs #}
     {% if "graphs" in data %}
         <h2 class="text-center">Grafieken</h2>
 
@@ -90,6 +92,72 @@
 
     {% endif %}
 
+    {# Results #}
+    {% if "results" in data %}
+        <h2 class="text-center">Resultaten als tabellen</h2>
+
+        {% if "averages" in data["results"] %}
+            <h3 class="text-center">Wagenpark gemiddelden</h3>
+            {% for scenario, strategies in data["results"]["averages"].items() %}
+                {% for strategy, years in strategies.items() %}
+                    <p>{{ scenario }} - strategie {{ strategy.split("_")[1] }}:</p>
+                    <table class="table table-striped">
+                        <thead>
+                            <tr>
+                                <th>year</th>
+                                {% for prop in result_properties %}
+                                <th>{{ prop }}</th>
+                            {% endfor %}
+                            </tr>
+                        </thead>
+                        <tbody>
+                            {% for year, year_data in years.items() %}
+                                <tr>
+                                    <td>{{ year }}</td>
+                                    {% for prop, value in year_data.items() %}
+                                        <td>{{ value }}</td>
+                                    {% endfor %}
+                                </tr>
+                            {% endfor %}
+                        </tbody>
+                    </table>
+                {% endfor %}
+            {% endfor %}
+        {% endif %}
+
+        <h3 class="text-center">Voertuig resultaten</h3>
+        {% for number_plate, vehicle_results in data["results"].items() if number_plate != "averages" %}
+            <h4 class="text-center">Voertuig: {{ number_plate }}</h4>
+            {% for scenario, strategies in vehicle_results.items() %}
+                {% for strategy, years in strategies.items() %}
+                    <p>{{ scenario }} - strategie {{ strategy.split("_")[1] }}:</p>
+                    <table class="table table-striped">
+                        <thead>
+                            <tr>
+                                <th>year</th>
+                                {% for prop in result_properties %}
+                                <th>{{ prop }}</th>
+                            {% endfor %}
+                            </tr>
+                        </thead>
+                        <tbody>
+                            {% for year, year_data in years.items() %}
+                                <tr>
+                                    <td>{{ year }}</td>
+                                    {% for prop, value in year_data.items() %}
+                                        <td>{{ value }}</td>
+                                    {% endfor %}
+                                </tr>
+                            {% endfor %}
+                        </tbody>
+                    </table>
+                {% endfor %}
+            {% endfor %}
+        {% endfor %}
+
+    {% endif %}
+
+    {# Inputs #}
     {% if "original_fleet" in data %}
         <h2 class="text-center">Wagenpark</h2>
         <table class="table table-striped">
